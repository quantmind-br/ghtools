#!/bin/bash

# ghdelete - Delete GitHub repositories interactively with fuzzy search
# Author: Script created for repository management
# Requires: gh (GitHub CLI), fzf (fuzzy finder)

set -euo pipefail

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored messages
print_error() {
    echo -e "${RED}[ERROR]${NC} $1" >&2
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# Check if required commands are available
check_dependencies() {
    local missing_deps=()

    if ! command -v gh &> /dev/null; then
        missing_deps+=("gh (GitHub CLI)")
    fi

    if ! command -v fzf &> /dev/null; then
        missing_deps+=("fzf")
    fi

    if [ ${#missing_deps[@]} -ne 0 ]; then
        print_error "Missing required dependencies:"
        for dep in "${missing_deps[@]}"; do
            echo "  - $dep"
        done
        echo ""
        echo "Install them using:"
        echo "  sudo pacman -S github-cli fzf"
        echo "  or"
        echo "  yay -S github-cli fzf"
        exit 1
    fi
}

# Check if user is authenticated with gh
check_gh_auth() {
    if ! gh auth status &> /dev/null; then
        print_error "You are not authenticated with GitHub CLI."
        echo "Run: gh auth login"
        exit 1
    fi
}

# Check if user has delete_repo scope
check_delete_scope() {
    print_info "Checking for delete_repo authorization scope..."

    # Try to get auth status and check for delete_repo scope
    if ! gh auth status 2>&1 | grep -q "delete_repo"; then
        print_warning "You may not have the 'delete_repo' scope."
        echo ""
        echo "To authorize repository deletion, run:"
        echo "  ${BLUE}gh auth refresh -s delete_repo${NC}"
        echo ""
        read -p "Do you want to continue anyway? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 0
        fi
    fi
}

# Fetch all repositories
fetch_repositories() {
    print_info "Fetching your repositories..." >&2

    # Get all repos (up to 1000, adjust --limit if you have more)
    local repos
    repos=$(gh repo list --limit 1000 2>&1)

    if [ $? -ne 0 ]; then
        print_error "Failed to fetch repositories." >&2
        echo "$repos" >&2
        exit 1
    fi

    if [ -z "$repos" ]; then
        print_warning "No repositories found." >&2
        exit 0
    fi

    echo "$repos"
}

# Main function
main() {
    echo -e "${RED}╔════════════════════════════════════════════╗${NC}"
    echo -e "${RED}║   GitHub Repository Deletion Tool         ║${NC}"
    echo -e "${RED}║   USE WITH CAUTION - NO UNDO!             ║${NC}"
    echo -e "${RED}╚════════════════════════════════════════════╝${NC}"
    echo ""

    # Check dependencies
    check_dependencies

    # Check authentication
    check_gh_auth

    # Check delete scope
    check_delete_scope

    # Fetch repositories
    local repos
    repos=$(fetch_repositories)

    # Count repositories
    local repo_count
    repo_count=$(echo "$repos" | wc -l)
    print_info "Found ${repo_count} repositories"
    echo ""

    # Use fzf for multi-selection
    print_info "Select repositories to DELETE (use TAB for multi-select, ENTER to confirm):"
    echo ""

    local selected_repos
    selected_repos=$(echo "$repos" | fzf \
        --multi \
        --height=80% \
        --border \
        --prompt="Select repos to DELETE > " \
        --preview='echo {}' \
        --preview-window=up:3:wrap \
        --header="TAB: select | ENTER: confirm | ESC: cancel" \
        --bind='ctrl-a:select-all,ctrl-d:deselect-all' \
        --color='fg:#ffffff,bg:#000000,hl:#ff0000' \
        --color='fg+:#ffffff,bg+:#333333,hl+:#ff0000' \
        --color='info:#ffff00,prompt:#ff0000,pointer:#ff0000' \
        --color='marker:#ff0000,spinner:#ffff00,header:#00ff00')

    # Check if user selected anything
    if [ -z "$selected_repos" ]; then
        print_warning "No repositories selected. Exiting."
        exit 0
    fi

    # Extract repository names (first column: OWNER/REPO)
    local repo_names=()
    while IFS= read -r line; do
        # Skip empty lines
        [[ -z "$line" ]] && continue

        # Extract the first field (OWNER/REPO)
        local repo_name
        repo_name=$(echo "$line" | awk '{print $1}')

        # Only add non-empty repo names
        [[ -n "$repo_name" ]] && repo_names+=("$repo_name")
    done <<< "$selected_repos"

    # Double-check we have repos to delete
    if [ ${#repo_names[@]} -eq 0 ]; then
        print_warning "No valid repositories found in selection. Exiting."
        exit 0
    fi

    # Confirm deletion
    echo ""
    print_warning "You are about to DELETE the following ${#repo_names[@]} repository(ies):"
    echo ""
    for repo in "${repo_names[@]}"; do
        echo -e "  ${RED}✗${NC} $repo"
    done
    echo ""
    echo -e "${RED}THIS ACTION CANNOT BE UNDONE!${NC}"
    echo ""
    read -p "Are you absolutely sure you want to delete these repositories? (y/N): " -r
    echo ""

    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_info "Deletion cancelled."
        exit 0
    fi

    # Delete repositories
    echo ""
    print_info "Starting deletion process..."
    echo ""

    local success_count=0
    local fail_count=0
    local failed_repos=()

    # Temporarily disable exit on error for the deletion loop
    set +e

    for repo in "${repo_names[@]}"; do
        echo -e "${BLUE}[DELETING]${NC} $repo"

        # Execute deletion and capture exit code
        local output
        output=$(gh repo delete "$repo" --yes 2>&1)
        local exit_code=$?

        if [ $exit_code -eq 0 ]; then
            echo "$output"
            print_success "Deleted: $repo"
            ((success_count++))
        else
            echo "$output"
            print_error "Failed to delete: $repo"
            failed_repos+=("$repo")
            ((fail_count++))
        fi
        echo ""
    done

    # Re-enable exit on error
    set -e

    # Summary
    echo -e "${BLUE}═══════════════════════════════════════════${NC}"
    echo -e "${BLUE}SUMMARY${NC}"
    echo -e "${BLUE}═══════════════════════════════════════════${NC}"
    print_success "Successfully deleted: $success_count"

    if [ $fail_count -gt 0 ]; then
        print_error "Failed to delete: $fail_count"
        echo ""
        echo "Failed repositories:"
        for repo in "${failed_repos[@]}"; do
            echo "  - $repo"
        done
    fi
    echo ""
}

# Run main function
main
